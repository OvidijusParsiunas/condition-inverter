import { Inverter } from '../../../../../shared/out/inverter/src/inverter';
import * as assert from 'assert';

// the reason why these tests are done in the extension directory instead of inverter is because they are used to achieve 100% test coverage
suite('Partial Inside Statement Inversion Suite', () => {
  [
    { input: `if`, output: `if` },
    { input: `if `, output: `if ` },
    { input: `if (`, output: `if (` },
    { input: `if  (  `, output: `if  (  ` },
    { input: `if ((())`, output: 'if (!(())' },
    { input: `if (dog`, output: `if (!dog` },
    { input: `if (true`, output: `if (false` },
    { input: `if ((true`, output: `if ((false` },
    { input: `if ((true)`, output: `if (!(true)` },
    { input: `if dog`, output: `if !dog` },
    { input: `if(dog`, output: `if(!dog` },
    { input: `for`, output: `for` },
    { input: `for `, output: `for ` },
    { input: `for dog`, output: `for !dog` },
    { input: `if (dog &&`, output: `if (!dog ||` },
    { input: `if (dog && cat`, output: `if (!dog || !cat` },
    { input: `if (dog && (cat`, output: `if (!dog || !(cat` },
    { input: `if (cat and`, output: 'if (!cat or' },
    { input: `if (cat and !(cat)`, output: `if (!cat or cat` },
    { input: `if (cat && () => {}`, output: `if (!cat || !(() => {})` },
    { input: `if (cat && (): void => { }`, output: `if (!cat || !((): void => { })` },
    { input: `if (cat && dog ?`, output: `if (!cat || !dog ?` },
    { input: `if cat && dog`, output: `if !cat || !dog` },
    { input: `if ((dog && cat`, output: 'if ((!dog || !cat' },
    { input: `if (((dog && cat`, output: 'if (((!dog || !cat' },
    {
      input: `if (dog && (): void => { if (dog) { console.log('hello') }}`,
      output: `if (!dog || !((): void => { if (dog) { console.log('hello') }})`,
    },
    {
      input: `if ((): void => { if (dog) { console.log('hello') }} && dog`,
      output: `if (!((): void => { if (dog) { console.log('hello') }}) || !dog`,
    },
    { input: `for (let i = 0; ((dog && cat`, output: 'for (let i = 0; ((!dog || !cat' },
    { input: `for (let i = 0; ((dog && cat)`, output: 'for (let i = 0; ((!dog || !cat)' },
    { input: `if (myFunc()`, output: 'if (!myFunc()' },
    { input: `if (myFunc(())`, output: 'if (!myFunc(())' },
    { input: `if (myFunc((())`, output: 'if (!myFunc((())' },
    { input: `if (myFunc(())`, output: 'if (!myFunc(())' },
    { input: `if (myFunc(true)`, output: 'if (!myFunc(true)' },
    { input: `if (myFunc(true`, output: 'if (!myFunc(true' },
    { input: `if (typeof (true`, output: 'if (!typeof (true' },
    { input: 'if (dog <<', output: 'if (!(dog <<)' },
    { input: 'if (dog >>', output: 'if (!(dog >>)' },
    { input: 'if (dog +', output: 'if (!(dog +)' },
    { input: 'if (dog -', output: 'if (!(dog -)' },
    { input: 'if num := 9', output: 'if num := 9' },
    { input: 'if num := 9;', output: 'if num := 9;' },
    { input: '&& cat + mouse) { console.log(2) }', output: '|| !(cat + mouse)) { console.log(2) }' },
    { input: '&& cat + mouse) && dog + cat) { console.log(2) }', output: '|| !(cat + mouse)) || !(dog + cat)) { console.log(2) }' },
    { input: '&& cat) { console.log(2) } if (dog', output: '|| !cat) { console.log(2) } if (!dog' },
    { input: '&& cat) { console.log(2) } if (dog &&', output: '|| !cat) { console.log(2) } if (!dog ||' },
    { input: '&& cat) { console.log(2) } if (dog <', output: '|| !cat) { console.log(2) } if (dog >=' },
    { input: '&& cat) { console.log(2) } throw (dog &&', output: '|| !cat) { console.log(2) } throw (!dog ||' },
    { input: 'throw (dog &&', output: 'throw (!dog ||' },
    { input: '&& cat) { console.log(2) } ; (dog &&', output: '|| !cat) { console.log(2) } ; (!dog ||' },
    { input: '&& cat) { console.log(2) } while (dog &&', output: '|| !cat) { console.log(2) } while (!dog ||' },
    { input: '&& cat) { console.log(2) } function', output: '|| !cat) { console.log(2) } function' },
    { input: 'if (cat().prop', output: 'if (!cat().prop' },
    { input: 'if (cat()[prop]', output: 'if (!cat()[prop]' },
    { input: `if (cat()['prop']`, output: `if (!cat()['prop']` },
    { input: `if (dog) { } for (let i = 0`, output: `if (!dog) { } for (let i = 0` },
    { input: `for (let i = 0; i < 2;`, output: `for (let i = 0; i >= 2;` },
    { input: `if (not dog &&`, output: `if (dog ||` },
    { input: `if  (not dog  &&`, output: `if  (dog  ||` },
    { input: `if  (((cat))) { dog &&`, output: `if  (((!cat))) { dog ||` },
    { input: `const = dog && cat; dog &&`, output: `const = !dog || !cat; !dog ||` },
  ].forEach((testProps) => {
    test(testProps.input, () => {
      const result = Inverter.invert(testProps.input);
      assert.strictEqual(result, testProps.output);
    });
  });
});
